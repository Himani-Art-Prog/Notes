Card Data:

import { generateDynamicId } from "../features/generateDynamicId";
export const commonHeaderAndBody = [
    {
        label: "Label",
        value: "Enter label",
        props: {
            color: '#d9d9d9',
            fontSize: '0.7rem',
        }
    },
    {
        label: "UOM",
        value: "Enter label",
        props: {
            color: '#d9d9d9',
            fontSize: '0.8rem',
        },
    },
    {
        label: "KPI",
        value: "0000",
        kpiname: "Not mapped",

        props: {
            color: '#f5f5f5',
            fontSize: '1.5rem',
            padding: '1rem',
        },
    }
];

export const actualAnddeviation = {
    commonHeaderAndBody: commonHeaderAndBody,
    cardfooter: [
        {
            label: "Left label",
            value: "label",
            props: {
                color: '#d9d9d9',
                fontSize: '0.7rem',
            }
        },
        {
            label: "left KPI",
            value: "0",
            kpiname: "Not mapped",
            props: {
                color: '#f5f5f5',
                fontSize: '0.7rem',
            }
        },
        {
            label: "Right label",
            value: "label",
            props: {
                color: '#d9d9d9',
                fontSize: '0.7rem',
            }
        },
        {
            label: "Right KPI",
            value: "0",
            kpiname: "Not mapped",
            calculationPatter: "other",
            props: {
                color: '#f5f5f5',
                fontSize: '0.7rem',
                positivebackgroundColor: "#00b154",
                negativebackgroundColor: "#e50510",

            }
        }
    ],
    props: {
        backgroundColor: '#26293C',
        // padding: "10px 10px 11px 12px",
        padding:'2px',
        borderRadius: '10px',
        boxShadow: '0 2px 6px 0 #000',
        height: '100%',
        formate: "0"
    }
};


export const deviation = {
    commonHeaderAndBody: commonHeaderAndBody,
    cardfooter: [
        {
            label: "Left label",
            id: generateDynamicId(),
            value: "Enter label",
            props: {
                color: '#d9d9d9',
                fontSize: '0.8rem',
            }
        },
        {
            label: "left KPI",
            id: generateDynamicId(),
            value: "00",
            kpiname: "Not mapped",
            props: {
                color: '#f5f5f5',
                fontSize: '0.9rem',
            }
        }
    ],
    props: {
        backgroundColor: '#26293C',
        padding: "10px 5px 2px 3px",
        borderRadius: '10px',
        boxShadow: '0 2px 6px 0 #000',
        height: '100%',
    },
};

export const actualcard = {
    commonHeaderAndBody: commonHeaderAndBody,
    props: {
        backgroundColor: '#26293C',
        padding: "10px 5px 2px 3px",
        borderRadius: '10px',
        boxShadow: '0 2px 6px 0 #000',
        height: '100%',
    }
};

Card Structure:

import React, { useEffect } from 'react';
import './blocks.css';


function Cardstructure({ itemData }) {
    const { cardfooter, commonHeaderAndBody, props } = itemData.content;

    return (
        <div className='card d-flex align-items-center' style={props}>
            <div className='w-100'>
                <div className="cardheaderandBody">
                    {commonHeaderAndBody.map((header, index) => (
                        <h6
                            key={index}
                            className='mb-1 text-center'
                            style={header.props}
                        >
                            {header.value}
                        </h6>
                    ))}
                </div>
                {cardfooter?.length > 0 && (
                    <div className='cardFooter'>
                        <div className='last-card'>
                            <div className='d-flex gap-2 align-items-center'>
                                <label style={cardfooter[0].props}>{cardfooter[0].value}:</label>
                                <span style={cardfooter[1].props}>{cardfooter[1].value}</span>
                            </div>
                            {cardfooter[2] &&
                                <div className='d-flex gap-1 align-items-center'>
                                    <label style={cardfooter[2].props}>{cardfooter[2].value}:</label>
                                    <div className='designbox' style={{
                                        ...cardfooter[3].props,
                                        backgroundColor: parseFloat(cardfooter[3].value) > 0 ? cardfooter[3].props.positivebackgroundColor : cardfooter[3].props.negativebackgroundColor
                                    }}>
                                        {cardfooter[3].value}
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                )}

            </div>
        </div >
    );
}

export default Cardstructure;

Card Editor:

import React, { useEffect, useState } from 'react';
import { Accordion, AccordionTab } from 'primereact/accordion';
import { getUnit, getValue } from '../../features/DeleteIconOptions';
import { UnitList } from '../../features/Dropdownvalues';
import { ColorChange } from './ComponentStyleEditor';
 
const CardEditor = ({ data, setPageData, selectedObject }) => {
    const { cardfooter, commonHeaderAndBody } = selectedObject.content;
 
    const handleCardPropertyChange = (section, index, propName, propValue) => {
        const updatedData = data.map(page => ({
            ...page,
            items: page.items.map(item => (
                item.id === selectedObject.id ? {
                    ...item,
                    content: {
                        ...item.content,
                        [section]: item.content[section].map((element, i) => (
                            i === index ? { ...element, [propName]: propValue } : element
                        )),
                    }
                } : item
            ))
        }));
        setPageData(updatedData)
    };
 
    const updatedProps = (section, index, propName, propValue) => {
        if (!/\d/.test(propValue)) {
            propValue = `0${propValue}`;
        } else if (propValue.startsWith('0')) {
            propValue = propValue.slice(1);
        }
        const updatedJsonData = data.map(page => ({
            ...page,
            items: page.items.map(item => (
                item.id === selectedObject.id ? {
                    ...item,
                    content: {
                        ...item.content,
                        [section]: item.content[section].map((element, i) => (
                            i === index ? { ...element, props: { ...element.props, [propName]: propValue } } : element
                        )),
                    }
                } : item
            ))
        }));
 
        setPageData(updatedJsonData)
    };
 
    return (
        <Accordion>
            <AccordionTab header="Text Editor">
                <div>
                    {commonHeaderAndBody.map((header, index) => (
                        <div key={index} className="d-flex align-items-center mb-1">
                            <label className='lablefeildcss'>{header.label}: </label>
                            <input
                                type="text"
                                className='inputfeildofcss'
                                value={header.kpiname || header.value}
                                onChange={e => handleCardPropertyChange("commonHeaderAndBody", index, header.kpiname ? "kpiname" : "value", e.target.value || " ")}
                            />
                        </div>
                    ))}
                    {cardfooter && cardfooter.map((footer, index) => (
                        <div key={index} className="d-flex align-items-center">
                            <label className='lablefeildcss'>{footer.label}: </label>
                            <FooterInput data={data} setPageData={setPageData} footer={footer} index={index} handleCardPropertyChange={handleCardPropertyChange} />
                        </div>
                    ))}
                </div>
            </AccordionTab>
            <AccordionTab header="Style editor">
                <div>
                    {commonHeaderAndBody.map((header, index) => (
                        <StyleEditorSection key={index} element={header} index={index} section="commonHeaderAndBody" updatedProps={updatedProps} />
                    ))}
                    {cardfooter && cardfooter.map((footer, index) => (
                        <StyleEditorSection key={index} element={footer} index={index} section="cardfooter" updatedProps={updatedProps} />
                    ))}
                </div>
            </AccordionTab>
        </Accordion>
    );
};
 
const StyleEditorSection = ({ element, index, section, updatedProps }) => (
    <div className='p-1 mb-1 border'>
        <label className='lablefeildcss fw-bold w-100'>{element.label} - {element.value} </label>
        <div className="d-flex align-items-center mb-1">
            <label className='lablefeildcss'>color:</label>
            <ColorChange bgcolor={element.props.color} onColorChange={color => updatedProps(section, index, "color", color)} />
        </div>
        <div className="d-flex align-items-center gap-1 mt-1">
            <label className='lablefeildcss'>fontSize:</label>
            <FontSizeEditor propValue={element.props.fontSize} updatedProps={value => updatedProps(section, index, "fontSize", `${value}`)} />
        </div>
    </div>
);
// const FontSizeEditor = ({ propValue, updatedProps }) => {
 
//     return (
//         <>
//             <input
//                 type="number"
//                 className="inputfeildofcss"
//                 value={getValue(propValue)}
//                 onChange={(e) => updatedProps(`${e.target.value}${getUnit(propValue)}`)}
//             />
//             <select
//                 className="inputfeildofcss"
//                 value={getUnit(propValue)}
//                 onChange={(e) => updatedProps(`${getValue(propValue)}${e.target.value}`)}
//             >
//                 {UnitList.map((item, index) =>
//                     <option value={item.label} key={index} title={item.description}>{item.label}</option>
//                 )}
//             </select>
//         </>
//     );
// };
 
const FontSizeEditor = ({ propValue, updatedProps }) =>{
    const getValue = (propValue) => {
        return parseFloat(propValue) || 0;
      };
     
      const getUnit = (propValue) => {
        return propValue.replace(/[0-9.-]/g, '') || 'px';
      };
    const [size, setSize] = useState(getValue(propValue));
    const [unit, setUnit] = useState(getUnit(propValue));
    let newSize=0 ;
 
   useEffect(() => {
        setSize(getValue(propValue));
        setUnit(getUnit(propValue));
      }, [propValue]);
 
      const handleSizeChange = (e) => {
        if(e.target.value>0)
          newSize = e.target.value;
          setSize(newSize);
          updatedProps(`${newSize}${unit}`);
         };
   
      const handleUnitChange = (e)=>{
        const newUnit = e.target.value;
        setUnit(newUnit);
        updatedProps(`${size}${newUnit}`);
      };
   
      return (
        <>
          <input
            type="number"
            className="inputfeildofcss"
            value={size}
            onChange={handleSizeChange}
          />
          <select
            className="inputfeildofcss"
            value={unit}
            onChange={handleUnitChange}
          >
            {UnitList.map((item, index) => (
              <option value={item.label} key={index} title={item.description}>{item.label}</option>
            ))}
          </select>
        </>
      );
};
 
const FooterInput = ({ footer, data, index, setPageData, handleCardPropertyChange }) => (
    footer.kpiname && footer.label !== "Right KPI" ?
        <input
            type="text"
            className='inputfeildofcss'
            value={footer.kpiname}
            onChange={(e) => handleCardPropertyChange("cardfooter", index, "kpiname", e.target.value || " ")}
        />
        :
        footer.kpiname && footer.label === "Right KPI" ?
            <DeviationComponent
                data={data}
                footer={footer}
                index={index}
                setPageData={setPageData}
                handleCardPropertyChange={handleCardPropertyChange}
            />
            :
            <input
                type="text"
                className='inputfeildofcss'
                value={footer.value}
                onChange={(e) => handleCardPropertyChange("cardfooter", index, "value", e.target.value)}
            />
);
 
 
 
const DeviationComponent = ({ data, selectedObject, setPageData, footer, index, handleCardPropertyChange }) => {
 
    const [colorValueGetForPositive, setColorValueGetForPositive] = useState(footer.props.positivebackgroundColor);
    const [colorValueGetForNegative, setColorValueGetForNegative] = useState(footer.props.negativebackgroundColor);
 
    const updatedColor = (propName, color) => {
        const updatedJsonData = data && data.map(page => ({
            ...page,
            items: page.items.map(item => ({
                ...item,
                content: {
                    ...item.content,
                    cardfooter: item.content.cardfooter && item.content.cardfooter.map(ft => ft.label === footer.label ? {
                        ...ft,
                        props: { ...ft.props, [propName]: color }
                    } : ft)
                }
            }))
        }));
        setPageData(updatedJsonData);
    };
 
    useEffect(() => {
        updatedColor("positivebackgroundColor", colorValueGetForPositive);
        updatedColor("negativebackgroundColor", colorValueGetForNegative);
    }, [colorValueGetForPositive, colorValueGetForNegative]);
 
    return (
        <div className='mt-2 w-100'>
            <div className='border py-1 px-2'>
                <div className='d-flex align-items-center gap-2'>
                    <input type='radio' checked={footer.calculationPatter === "Act-Ref"} onChange={() => handleCardPropertyChange("cardfooter", index, "calculationPatter", "Act-Ref")} />
                    <label className='lablefeildcss'>Act - Ref</label>
                </div>
                {footer.calculationPatter === "Act-Ref" && (
                    <>
                        <ColorChangeSection
                            label="Choose color for +value"
                            colorValue={colorValueGetForPositive}
                            setColorValue={setColorValueGetForPositive}
                        />
                        <ColorChangeSection
                            label="Choose color for -value"
                            colorValue={colorValueGetForNegative}
                            setColorValue={setColorValueGetForNegative}
                        />
                    </>
                )}
            </div>
            <div className='border py-1 px-2'>
 
                <div className='d-flex align-items-center gap-2'>
                    <input type='radio' checked={footer.calculationPatter === "Ref-Act"} onChange={() => handleCardPropertyChange("cardfooter", index, "calculationPatter", "Ref-Act")} />
                    <label className='lablefeildcss'>Ref - Act</label>
                </div>
                {footer.calculationPatter === "Ref-Act" && (
                    <>
                        <ColorChangeSection
                            label="Choose color for +value"
                            colorValue={colorValueGetForPositive}
                            setColorValue={setColorValueGetForPositive}
                        />
                        <ColorChangeSection
                            label="Choose color for -value"
                            colorValue={colorValueGetForNegative}
                            setColorValue={setColorValueGetForNegative}
                        />
                    </>
                )}
            </div>
            <div className='border py-1 px-2'>
 
                <div className='d-flex align-items-center gap-2'>
                    <input type='radio' checked={footer.calculationPatter === "other"} onChange={() => handleCardPropertyChange("cardfooter", index, "calculationPatter", "other")} />
                    <label className='lablefeildcss'>Other</label>
                </div>
                {footer.calculationPatter === "other" && (
                    <>
                        <input type="text" className='inputfeildofcss' value={footer.kpiname} onChange={e => handleCardPropertyChange("cardfooter", index, "kpiname", e.target.value || " ")} />
 
                        <ColorChangeSection
                            label="Choose color for +value"
                            colorValue={colorValueGetForPositive}
                            setColorValue={setColorValueGetForPositive}
                        />
                        <ColorChangeSection
                            label="Choose color for -value"
                            colorValue={colorValueGetForNegative}
                            setColorValue={setColorValueGetForNegative}
                        />
                    </>
                )}
            </div>
        </div>
    );
};
 
const ColorChangeSection = ({ label, colorValue, setColorValue }) => (
    <div className="d-flex flex-column align-items-center mb-1">
        <label className='lablefeildcss w-100'>{label}</label>
        <ColorChange bgcolor={colorValue} onColorChange={setColorValue} />
    </div>
);
 
export default CardEditor;